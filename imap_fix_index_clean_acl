#!/usr/bin/env bash

################################################################################
## 
## Cleanup broken ACLs of non-existing users and fix mailbox index files
## 
## Copyright (C) 2015-2020 Michael Roland <mi.roland@gmail.com>
## 
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <https://www.gnu.org/licenses/>.
## 
################################################################################


SCRIPT_NAME=$(basename $0)
SCRIPT_PATH=$(readlink -f "$(dirname $0)")


. "$SCRIPT_PATH/kolab_config_loader"


usage() {
	echo "Usage: ${SCRIPT_NAME} [options] <mailbox> [user-id]"
	echo "Cleanup broken ACLs of non-existing users and fix mailbox index files"
	echo ""
	echo -e "  <mailbox>"
	echo -e "  \tMailbox to clean up, the following actions are performed:"
	echo -e "  \t- Purge all ACL entries for user-id (if present) from global"
	echo -e "  \t  mailbox database for ALL mailboxes"
	echo -e "  \t- Purge ACL entries for user-id (if present) from headers of"
	echo -e "  \t  the given mailbox and any mailbox below it"
	echo -e "  \t- Fix CRC values in cyrus.index header (for cyrus.header and"
	echo -e "  \t  cyrus.index)"
	echo -e "  \t- Reconstruct the given mailbox and any mailbox below it"
	echo -e "  \t- Fix file system permissions on Cyrus IMAPd spool"
	echo -e "  "
	echo -e "  [user-id]"
	echo -e "  \t(optional) user ID to purge from ACL entries"
	echo -e "  "
	echo -e "Options:"
	echo -e "\t-h          Show this message"
	echo ""
	echo "Copyright (c) 2015-2020 Michael Roland <mi.roland@gmail.com>"
	echo "License GPLv3+: GNU GPL version 3 or later <https://www.gnu.org/licenses/>"
	echo ""
	echo "This is free software: you can redistribute and/or modify it under the"
	echo "terms of the GPLv3+.  There is NO WARRANTY; not even the implied warranty"
	echo "of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
	echo ""
}

while getopts ":h?:" opt; do
    case "$opt" in
    h|\?)
        if [ ! -z $OPTARG ] ; then
            echo "${SCRIPT_NAME}: invalid option -- $OPTARG" >&2
        fi
        usage
        exit 1
        ;;
    esac
done

shift $((OPTIND-1))
[ "$1" = "--" ] && shift

if [ -z "$1" ] ; then
	echo "${SCRIPT_NAME}: missing argument -- mailbox" >&2
	usage
	exit 1
fi

mbox_to_fix="$1"
user_to_purge="$2"


if [ ! -z "$user_to_purge" ] ; then
    db_tmp_file=$(mktemp)
    db_new_tmp_file=$(mktemp)

    echo "Stopping IMAP daemon ..."
    systemctl stop ${SERVICE_IMAP}

    echo "Dumping IMAP mailbox database ..."
	su ${IMAPD_USER} -c "${CYRUS_CMD}ctl_mboxlist -d" >"$db_tmp_file"
	sed -E "s/\s$user_to_purge\s+[a-z]+//g" "$db_tmp_file" >"$db_new_tmp_file"
	if ! diff -q "$db_tmp_file" "$db_new_tmp_file" >/dev/null ; then
		echo "User $user_to_purge purged from database:"
		diff -u 1 "$db_tmp_file" "$db_new_tmp_file"
		echo "Updating IMAP mailbox database ..."
		su ${IMAPD_USER} -c "${CYRUS_CMD}ctl_mboxlist -u" <"$db_new_tmp_file"
	fi

    echo "Fixing file system permissions ..."
    chown -R ${IMAPD_USER}:${IMAPD_GROUP} "${IMAP_SPOOL}"

    echo "Starting IMAP daemon ..."
    systemctl start cyrus-imapd.service

    rm "$db_tmp_file"
    rm "$db_new_tmp_file"
fi


echo "Stopping IMAP daemon ..."
systemctl stop cyrus-imapd.service

mbox_path=$(${CYRUS_CMD}mbpath "$mbox_to_fix")
find "$mbox_path" -name 'cyrus.header' -print0 | while IFS= read -r -d '' header ; do
	mbox_folder_path=$(dirname "$header")
	rel_mbox_path="${mbox_folder_path#$mbox_path}"
	folder_index="$mbox_folder_path/cyrus.index"
    
	if [ ! -z "$user_to_purge" ] ; then
		echo "Purging permissions for $user_to_purge from folder $rel_mbox_path"
		sed -i -E "s/^$user_to_purge\s+[a-z]+//" "$header"
		sed -i -E "s/\s$user_to_purge\s+[a-z]+//" "$header"
		sed -i -E "s/^\s(\S+\s+[a-z]+)/\1/" "$header"
	fi
    
	header_file_crc=$(perl -e 'use Archive::Zip; my $crc = 0; while(<STDIN>){$crc = Archive::Zip::computeCRC32($_, $crc);} printf("%08x", $crc);' <"$header")
	current_header_file_crc=$(dd if="$folder_index" bs=1 skip=96 count=4 2>/dev/null | perl -e 'while(<STDIN>){print unpack("H*", $_);}')
	if [ "$header_file_crc" != "$current_header_file_crc" ] ; then
		echo "Fixing CRC from $current_header_file_crc to $header_file_crc for cyrus.header in $rel_mbox_path"
		echo "$header_file_crc" | perl -e 'print pack("H*", <STDIN>);' | dd of="$folder_index" bs=1 seek=96 count=4 conv=notrunc 2>/dev/null
	fi
    
	index_header_len=$(dd if="$folder_index" bs=1 skip=12 count=4 2>/dev/null | perl -e 'print unpack("L>", <STDIN>);')
	current_index_header_crc=$(dd if="$folder_index" bs=1 skip=$(( index_header_len - 4)) count=4 2>/dev/null | perl -e 'while(<STDIN>){print unpack("H*", $_);}')
	index_header_crc=$(dd if="$folder_index" bs=1 skip=0 count=$(( index_header_len - 4)) 2>/dev/null | perl -e 'use Archive::Zip; my $crc = 0; while(<STDIN>){$crc = Archive::Zip::computeCRC32($_, $crc);} printf("%08x", $crc);')
	if [ "$index_header_crc" != "$current_index_header_crc" ] ; then
		echo "Fixing CRC from $current_index_header_crc to $index_header_crc for cyrus.index in $rel_mbox_path"
		echo "$index_header_crc" | perl -e 'print pack("H*", <STDIN>);' | dd of="$folder_index" bs=1 seek=$(( index_header_len - 4)) count=4 conv=notrunc 2>/dev/null
	fi
done

echo "Fixing file system permissions ..."
chown -R ${IMAPD_USER}:${IMAPD_GROUP} "${IMAP_SPOOL}"

echo "Starting reconstruct for $mbox_to_fix ..."
su ${IMAPD_USER} -c "${CYRUS_CMD}reconstruct -r -M \"$mbox_to_fix\""

echo "Fixing file system permissions ..."
chown -R ${IMAPD_USER}:${IMAPD_GROUP} "${IMAP_SPOOL}"

echo "Starting IMAP daemon ..."
systemctl start cyrus-imapd.service

echo "Done."
